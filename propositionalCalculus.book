book Propositional Calculus

chapter Implication and Negation
We start by introducing our two fundamental connectives, → and ¬, and proving some basic facts about them.

comment Our first connective is '→', or implication. It is a binary connective, which means it has two substatements.
connective → 2
comment This should be read "α implies β", or "if α then β".

comment Our first rule is the first half of the definition of '→'.
rule introduceImplication 1 ⊢ 2 ⇒ → 1 2
comment In other words, if by assuming α we can deduce β, then we can deduce α → β directly. This rule is called "Implication Introduction".

comment This rule is all we need to prove our first theorem.
theorem imp-ref Implication is Reflexive
assume 1
introduceImplication f.h
qed
comment We start by assuming α. But then we certainly already know α itself, so we can apply the rule of implication introduction to deduce α → α as a tautology - a statement that is always true, regardless of α.

comment Our next rule of inference completes the definition of '→'.
rule eliminateImplication → 1 2 & 1 ⇒ 2
comment This rule is called "Implication Elimination" within the system of natural deduction that we are using, but is more commonly known as "Modus Ponens". Our next theorem demonstrates its use.

theorem imp-trans Implication is Transitive
hypothesis → 1 2
hypothesis → 2 3
assume 1
  eliminateImplication h1 f.h
  eliminateImplication h2 f.1
introduceImplication f.2
qed

connective ¬ 1
rule introduceNegation 1 ⊢ 2 & ¬ 2 ⇒ ¬ 1
rule eliminateNegation ¬ ¬ 1 ⇒ 1

theorem double-not Double Negation Introduction
hypothesis 1
assume ¬ 1
introduceNegation h1 f.h
qed

theorem any-imp-true Anything Implies a True Statement
hypothesis 1
assume 2
introduceImplication h1
qed

theorem false-imp-any A False Statement Implies Anything
hypothesis ¬ 1
assume 1
  assume ¬ 2
  introduceNegation f.h h1
  eliminateNegation f.1
introduceImplication f.2
qed

theorem false-imp-any-2 A False Statement Implies Anything (2)
hypothesis 1
double-not h1
false-imp-any 1 2
qed

theorem contraposition Contraposition
hypothesis → 1 2
assume ¬ 2
  assume 1
    eliminateImplication h1 f.f.h
  introduceNegation f.f.1 f.h
introduceImplication f.1
qed

theorem contradiction Proof by Contradiction
hypothesis → 1 2
hypothesis → 1 ¬ 2
assume 1
  eliminateImplication h1 f.h
  eliminateImplication h2 f.h
introduceNegation f.1 f.2
qed

theorem cases Proof by Cases
hypothesis → 1 2
hypothesis → ¬ 1 2
contraposition h1
contraposition h2
contradiction 1 2
eliminateNegation 3
qed

chapter Conjunction and Disjunction
We introduce two more connectives, ∧ (conjunction, or 'and') and ∨ (disjunction, or 'or'). These will not be defined with introduction and elimination rules, but in terms of the two fundamental connectives → and ¬. We can then prove introduction and elimination rules for them as theorems.

connective ∧ 2 ¬ → 1 ¬ 2

theorem introduce-and Introduce Conjunction
hypothesis 1
hypothesis 2
assume → 1 ¬ 2
  eliminateImplication f.h h1
introduceNegation h2 f.1
definition-∧ 1
qed

theorem eliminate-and-l Eliminate Conjunction (Left)
hypothesis ∧ 1 2
assume ¬ 1
  false-imp-any f.h ¬ 2
  definition-∧ h1
introduceNegation f.1 f.2
eliminateNegation 1
qed

theorem eliminate-and-r Eliminate Conjunction (Right)
hypothesis ∧ 1 2
assume ¬ 2
  any-imp-true f.h 1
  definition-∧ h1
introduceNegation f.1 f.2
eliminateNegation 1
qed

theorem flip-and Reverse Conjunction
hypothesis ∧ 1 2
eliminate-and-l h1
eliminate-and-r h1
introduce-and 2 1
qed

connective ∨ 2 → ¬ 1 2

theorem or-left Introduce Disjunction (Left)
hypothesis 1
false-imp-any-2 h1 2
definition-∨ 1
qed

theorem or-right Introduce Disjunction (Right)
hypothesis 2
any-imp-true h1 ¬ 1
definition-∨ 1
qed

theorem eliminate-or Eliminate Disjunction
hypothesis → 1 3
hypothesis → 2 3
hypothesis ∨ 1 2
definition-∨ h3
imp-trans 1 h2
cases h1 2
qed

theorem introduce-or Combine Cases
hypothesis → 1 3
hypothesis → 2 3
assume ∨ 1 2
  definition-∨ f.h
  imp-trans f.1 h2
  cases h1 f.2
introduceImplication f.3
qed

theorem flip-or Reverse Disjunction
hypothesis ∨ 1 2
introduceImplication or-right 1 2
introduceImplication or-left 2 1
introduce-or 1 2
eliminateImplication 3 h1
qed

theorem excluded-middle Law of the Excluded Middle
imp-ref ¬ 1
definition-∨ 1
qed

theorem non-contradiction Law of Non-Contradiction
assume ∧ 1 ¬ 1
definition-∧ f.h
introduceImplication double-not 1
introduceNegation f.2 f.1
qed

chapter Equivalence
We introduce our final connective, ↔ (equivalence).

connective ↔ 2 ∧ → 1 2 → 2 1

theorem equiv-forward Implication from Equivalence
hypothesis ↔ 1 2
definition-↔ h1
eliminate-and-l 1
qed

theorem equiv-converse Converse from Equivalence
hypothesis ↔ 1 2
definition-↔ h1
eliminate-and-r 1
qed

theorem introduce-equiv Equivalence from Implication and Converse
hypothesis → 1 2
hypothesis → 2 1
introduce-and h1 h2
definition-↔ 1
qed

theorem flip-equiv Reverse Equivalence
hypothesis ↔ 1 2
definition-↔ h1
flip-and 1
definition-↔ 2
qed

comment The next three theorems establish the meta-theorem that if α ↔ β, then α can be substituted for β in any other statement. Once we have shown this is true for our two fundamental connectives, establishing it for any more complicated statement is just a rote application of these three theorems.

theorem equiv-imp-ant Equivalence of Implication Antecedent
hypothesis ↔ 1 2
assume → 1 3
  equiv-converse h1
  imp-trans f.1 f.h
introduceImplication f.2
assume → 2 3
  equiv-forward h1
  imp-trans f.1 f.h
introduceImplication f.2
introduce-equiv 1 2
qed

theorem equiv-imp-con Equivalence of Implication Consequent
hypothesis ↔ 1 2
assume → 3 1
  equiv-forward h1
  imp-trans f.h f.1
introduceImplication f.2
assume → 3 2
  equiv-converse h1
  imp-trans f.h f.1
introduceImplication f.2
introduce-equiv 1 2
qed

theorem equiv-not Equivalence of Negation
hypothesis ↔ 1 2
equiv-forward h1
equiv-converse h1
contraposition 2
contraposition 1
introduce-equiv 3 4
qed

comment We now show that our equivalence connective has the properties we will later establish as defining an equivalence relation, justifying the use of the same word to describe each.

theorem equiv-refl Equivalence is Reflexive
imp-ref 1
introduce-and 1 1
definition-↔ 2
qed

theorem equiv-trans Equivalence is Transitive
hypothesis ↔ 1 2
hypothesis ↔ 2 3
equiv-forward h1
equiv-forward h2
imp-trans 1 2
equiv-converse h2
equiv-converse h1
imp-trans 4 5
introduce-equiv 3 6
qed

theorem equiv-sym Equivalence is Symmetric
introduceImplication flip-equiv 1 2
introduceImplication flip-equiv 2 1
introduce-equiv 1 2
qed

chapter Propositional Logic Identities
Having established the basic properties of all our connectives, we can now prove a list of identities relating them.

theorem ∧-defn Conjunction is Equivalent to Its Definition
introduceImplication definition-∧ ∧ 1 2
introduceImplication definition-∧ ¬ → 1 ¬ 2
introduce-equiv 1 2
qed

theorem or-defn Disjunction is Equivalent to Its Definition
introduceImplication definition-∨ ∨ 1 2
introduceImplication definition-∨ → ¬ 1 2
introduce-equiv 1 2
qed

theorem equiv-defn Equivalence is Equivalent to Its Definition
introduceImplication definition-↔ ↔ 1 2
introduceImplication definition-↔ ∧ → 1 2 → 2 1
introduce-equiv 1 2
qed

theorem ∧-sym Conjunction is Symmetric
introduceImplication flip-and 1 2
introduceImplication flip-and 2 1
introduce-equiv 1 2
qed

theorem or-sym Disjunction is Symmetric
introduceImplication flip-or 1 2
introduceImplication flip-or 2 1
introduce-equiv 1 2
qed

theorem ∧-assoc Conjunction is Associative
assume ∧ 1 ∧ 2 3
  eliminate-and-r f.h
  eliminate-and-l f.h
  eliminate-and-l f.1
  eliminate-and-r f.1
  introduce-and f.2 f.3
  introduce-and f.5 f.4
introduceImplication f.6
assume ∧ ∧ 1 2 3
  eliminate-and-l f.h
  eliminate-and-l f.1
  eliminate-and-r f.1
  eliminate-and-r f.h
  introduce-and f.3 f.4
  introduce-and f.2 f.5
introduceImplication f.6
introduce-equiv 1 2
qed

theorem or-assoc Disjunction is Associative
introduceImplication or-left 1 2
introduceImplication or-right 2 1
introduceImplication or-left ∨ 1 2 3
imp-trans 1 3
imp-trans 2 3
introduceImplication or-right 3 ∨ 1 2
introduce-or 5 6
introduce-or 4 7
introduceImplication or-left 2 3
introduceImplication or-right 3 2
introduceImplication or-right ∨ 2 3 1
introduceImplication or-left 1 ∨ 2 3
imp-trans 9 11
imp-trans 10 11
introduce-or 12 13
introduce-or 15 14
introduce-equiv 8 16
qed

theorem ∧-idem Conjunction is Idempotent
assume 1
  introduce-and f.h f.h
introduceImplication f.1
introduceImplication eliminate-and-r 1 1
introduce-equiv 1 2
qed

theorem or-idem Disjunction is Idempotent
introduceImplication or-right 1 1
imp-ref 1
introduce-or 2 2
introduce-equiv 1 3
qed

theorem double-not-equiv Double Negation is No Negation At All
introduceImplication double-not 1
assume ¬ ¬ 1
  eliminateNegation f.h
introduceImplication f.1
introduce-equiv 1 2
qed

