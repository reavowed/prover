book Propositional Calculus

chapter Implication and Negation
We start by introducing our two fundamental connectives, → and ¬, and proving some basic facts about them.

comment Our first connective is '→', or implication. It is a binary connective, which means it has two substatements.
connective → 2
comment This should be read "α implies β", or "if α then β".

comment Our first rule is the first half of the definition of '→'.
rule introduceImplication 1 ⊢ 2 ⇒ → 1 2
comment In other words, if by assuming α we can deduce β, then we can deduce α → β directly. This rule is called "Implication Introduction".

comment This rule is all we need to prove our first theorem.
theorem implicationIsReflexive Implication is Reflexive
assume 1
introduceImplication f.a
qed
comment We start by assuming α. But then we certainly already know α itself, so we can apply the rule of implication introduction to deduce α → α as a tautology - a statement that is always true, regardless of α.

comment Our next rule of inference completes the definition of '→'.
rule eliminateImplication → 1 2 & 1 ⇒ 2
comment This rule is called "Implication Elimination" within the system of natural deduction that we are using, but is more commonly known as "Modus Ponens". Our next theorem demonstrates its use.

theorem implicationIsTransitive Implication is Transitive
premise → 1 2
premise → 2 3
assume 1
  eliminateImplication p1 f.a
  eliminateImplication p2 f.1
introduceImplication f.2
qed

connective ¬ 1
rule introduceNegation 1 ⊢ 2 & ¬ 2 ⇒ ¬ 1
rule eliminateNegation ¬ ¬ 1 ⇒ 1

theorem introduceDoubleNegation Double Negation Introduction
premise 1
assume ¬ 1
introduceNegation p1 f.a
qed

theorem anythingImpliesTrue Anything Implies a True Statement
premise 1
assume 2
introduceImplication p1
qed

theorem contradictionImpliesAnything A Contradiction Implies Anything
premise 1
premise ¬ 1
assume ¬ 2
introduceNegation p1 p2
eliminateNegation 1
qed

theorem falseImpliesAnything1 A False Statement Implies Anything (1)
premise ¬ 1
assume 1
  contradictionImpliesAnything f.a p1 2
introduceImplication f.1
qed

theorem falseImpliesAnything2 A False Statement Implies Anything (2)
premise 1
assume ¬ 1
  contradictionImpliesAnything p1 f.a 2
introduceImplication f.1
qed

theorem modusTollens1 Modus Tollens (1)
premise → 1 2
premise ¬ 2
assume 1
  eliminateImplication p1 f.a
introduceNegation f.1 p2
qed

theorem modusTollens2 Modus Tollens (2)
premise → ¬ 1 2
premise ¬ 2
modusTollens1 p1 p2
eliminateNegation 1
qed

theorem modusTollens3 Modus Tollens (3)
premise → 1 ¬ 2
premise 2
assume 1
  eliminateImplication p1 f.a
introduceNegation p2 f.1
qed

theorem modusTollens4 Modus Tollens (4)
premise → ¬ 1 ¬ 2
premise 2
modusTollens3 p1 p2
eliminateNegation 1
qed

theorem contraposition Contraposition
premise → 1 2
assume ¬ 2
  modusTollens1 p1 f.a
introduceImplication f.1
qed

theorem proofByContradiction Proof by Contradiction
premise → 1 2
premise → 1 ¬ 2
assume 1
  eliminateImplication p1 f.a
  eliminateImplication p2 f.a
introduceNegation f.1 f.2
qed

theorem proofByCases Proof by Cases
premise → 1 2
premise → ¬ 1 2
contraposition p1
contraposition p2
proofByContradiction 1 2
eliminateNegation 3
qed

chapter Conjunction and Disjunction
We introduce two more connectives, ∧ (conjunction, or 'and') and ∨ (disjunction, or 'or'). These will not be defined with introduction and elimination rules, but in terms of the two fundamental connectives → and ¬. We can then prove introduction and elimination rules for them as theorems.

connective ∧ 2 ¬ → 1 ¬ 2

theorem introduceAnd Introduce Conjunction
premise 1
premise 2
assume → 1 ¬ 2
  eliminateImplication f.a p1
introduceNegation p2 f.1
apply-∧ 1
qed

theorem eliminateAndLeft Eliminate Conjunction (Left)
premise ∧ 1 2
unapply-∧ p1
introduceImplication falseImpliesAnything1 ¬ 1 ¬ 2
modusTollens2 2 1
qed

theorem eliminateAndRight Eliminate Conjunction (Right)
premise ∧ 1 2
unapply-∧ p1
introduceImplication anythingImpliesTrue ¬ 2 1
modusTollens2 2 1
qed

theorem reverseAnd Reverse Conjunction
premise ∧ 1 2
eliminateAndLeft p1
eliminateAndRight p1
introduceAnd 2 1
qed

connective ∨ 2 → ¬ 1 2

theorem introduceOrLeft Introduce Disjunction (Left)
premise 1
falseImpliesAnything2 p1 2
apply-∨ 1
qed

theorem introduceOrRight Introduce Disjunction (Right)
premise 2
anythingImpliesTrue p1 ¬ 1
apply-∨ 1
qed

theorem eliminateOr Eliminate Disjunction
premise ∨ 1 2
premise → 1 3
premise → 2 3
unapply-∨ p1
implicationIsTransitive 1 p3
proofByCases p2 2
qed

theorem combineCases Combine Cases
premise → 1 3
premise → 2 3
assume ∨ 1 2
  eliminateOr f.a p1 p2
introduceImplication f.1
qed

theorem reverseOr Reverse Disjunction
premise ∨ 1 2
introduceImplication introduceOrRight 1 2
introduceImplication introduceOrLeft 2 1
combineCases 1 2
eliminateImplication 3 p1
qed

theorem excludedMiddle Law of the Excluded Middle
implicationIsReflexive ¬ 1
apply-∨ 1
qed

theorem nonContradiction Law of Non-Contradiction
assume ∧ 1 ¬ 1
  unapply-∧ f.a
  introduceImplication introduceDoubleNegation 1
introduceNegation f.2 f.1
qed

chapter Equivalence
We introduce our final connective, ↔ (equivalence).

connective ↔ 2 ∧ → 1 2 → 2 1

theorem eliminateEquivalenceForward Implication from Equivalence
premise ↔ 1 2
unapply-↔ p1
eliminateAndLeft 1
qed

theorem eliminateEquivalenceConverse Converse from Equivalence
premise ↔ 1 2
unapply-↔ p1
eliminateAndRight 1
qed

theorem introduceEquivalence Equivalence from Implication and Converse
premise → 1 2
premise → 2 1
introduceAnd p1 p2
apply-↔ 1
qed

theorem reverseEquivalence Reverse Equivalence
premise ↔ 1 2
unapply-↔ p1
reverseAnd 1
apply-↔ 2
qed

comment The next three theorems establish the meta-theorem that if α ↔ β, then α can be substituted for β in any other statement. Once we have shown this is true for our two fundamental connectives, establishing it for any more complicated statement is just a rote application of these three theorems.

theorem substituteEquivalenceIntoImplicationAntecedent Substitute Equivalence into Implication Antecedent
premise ↔ 1 2
assume → 1 3
  eliminateEquivalenceConverse p1
  implicationIsTransitive f.1 f.a
introduceImplication f.2
assume → 2 3
  eliminateEquivalenceForward p1
  implicationIsTransitive f.1 f.a
introduceImplication f.2
introduceEquivalence 1 2
qed

theorem substituteEquivalenceIntoImplicationConsequent Substitute Equivalence into Implication Consequent
premise ↔ 1 2
assume → 3 1
  eliminateEquivalenceForward p1
  implicationIsTransitive f.a f.1
introduceImplication f.2
assume → 3 2
  eliminateEquivalenceConverse p1
  implicationIsTransitive f.a f.1
introduceImplication f.2
introduceEquivalence 1 2
qed

theorem substituteEquivalenceIntoNegation Substitute Equivalence into Negation
premise ↔ 1 2
eliminateEquivalenceForward p1
eliminateEquivalenceConverse p1
contraposition 2
contraposition 1
introduceEquivalence 3 4
qed

comment We now show that our equivalence connective has the properties we will later establish as defining an equivalence relation, justifying the use of the same word to describe each.

theorem equivalenceIsReflexive Equivalence is Reflexive
implicationIsReflexive 1
introduceAnd 1 1
apply-↔ 2
qed

theorem equivalenceIsTransitive Equivalence is Transitive
premise ↔ 1 2
premise ↔ 2 3
eliminateEquivalenceForward p1
eliminateEquivalenceForward p2
implicationIsTransitive 1 2
eliminateEquivalenceConverse p2
eliminateEquivalenceConverse p1
implicationIsTransitive 4 5
introduceEquivalence 3 6
qed

theorem equivalenceIsSymmetric Equivalence is Symmetric
introduceImplication reverseEquivalence ↔ 1 2
introduceImplication reverseEquivalence ↔ 2 1
introduceEquivalence 1 2
qed

comment Some helper theorems for proofs involving equivalences

theorem equivalenceIsTransitiveLeft Equivalence is Transitive (Left)
premise ↔ 2 1
premise ↔ 2 3
reverseEquivalence p1
equivalenceIsTransitive 1 p2
qed

theorem equivalenceIsTransitiveRight Equivalence is Transitive (Right)
premise ↔ 1 2
premise ↔ 3 2
reverseEquivalence p2
equivalenceIsTransitive p1 1
qed

theorem negateEquivalence Negate Equivalence
premise ↔ 1 2
eliminateEquivalenceForward p1
contraposition 1
eliminateEquivalenceConverse p1
contraposition 3
introduceEquivalence 4 2
qed

theorem modusPonensEquivalenceLeft Modus Ponens with Equivalence (Left)
premise ↔ 1 2
premise 1
eliminateEquivalenceForward p1
eliminateImplication 1 p2
qed

theorem modusPonensEquivalenceRight Modus Ponens with Equivalence (Right)
premise ↔ 1 2
premise 2
eliminateEquivalenceConverse p1
eliminateImplication 1 p2
qed

theorem modusTollensEquivalenceLeft Modus Tollens With Equivalence (Left)
premise ↔ 1 2
premise ¬ 1
negateEquivalence p1
modusPonensEquivalenceLeft 1 p2
qed

theorem modusTollensEquivalenceRight Modus Tollens With Equivalence (Right)
premise ↔ 1 2
premise ¬ 2
negateEquivalence p1
modusPonensEquivalenceRight 1 p2
qed

theorem modusPonensEquivalenceLeftOrLeft Modus Ponens with Equivalence (Left) Inside Or (Left)
premise ↔ ∨ 1 2 3
premise 1
introduceOrLeft p2 2
modusPonensEquivalenceLeft p1 1
qed

theorem modusPonensEquivalenceLeftOrRight Modus Ponens with Equivalence (Left) Inside Or (Right)
premise ↔ ∨ 1 2 3
premise 2
introduceOrRight p2 1
modusPonensEquivalenceLeft p1 1
qed

theorem modusPonensEquivalenceRightOrLeft Modus Ponens with Equivalence Inside Or (Left)
premise ↔ 1 ∨ 2 3
premise 2
introduceOrLeft p2 3
modusPonensEquivalenceRight p1 1
qed

theorem modusPonensEquivalenceRightOrRight Modus Ponens with Equivalence (Right) Inside Or (Right)
premise ↔ 1 ∨ 2 3
premise 3
introduceOrRight p2 2
modusPonensEquivalenceRight p1 1
qed

theorem trueStatementsAreEquivalent True Statements Are Equivalent
premise 1
premise 2
anythingImpliesTrue p2 1
anythingImpliesTrue p1 2
introduceEquivalence 1 2
qed

theorem falseStatementsAreEquivalent False Statements Are Equivalent
premise ¬ 1
premise ¬ 2
falseImpliesAnything1 p1 2
falseImpliesAnything1 p2 1
introduceEquivalence 1 2
qed

theorem implicationThenEquivalence Implication then Equivalence
premise → 1 2
premise ↔ 2 3
eliminateEquivalenceForward p2
implicationIsTransitive p1 1
qed

chapter Propositional Logic Identities
Having established the basic properties of all our connectives, we can now prove a list of identities relating them.

theorem andDefinitionEquivalence Conjunction is Equivalent to Its Definition
introduceImplication unapply-∧ ∧ 1 2
introduceImplication apply-∧ ¬ → 1 ¬ 2
introduceEquivalence 1 2
qed

theorem orDefinitionEquivalence Disjunction is Equivalent to Its Definition
introduceImplication unapply-∨ ∨ 1 2
introduceImplication apply-∨ → ¬ 1 2
introduceEquivalence 1 2
qed

theorem equivalenceDefinitionEquivalence Equivalence is Equivalent to Its Definition
introduceImplication unapply-↔ ↔ 1 2
introduceImplication apply-↔ ∧ → 1 2 → 2 1
introduceEquivalence 1 2
qed

theorem andIsSymmetric Conjunction is Symmetric
introduceImplication reverseAnd ∧ 1 2
introduceImplication reverseAnd ∧ 2 1
introduceEquivalence 1 2
qed

theorem orIsSymmetric Disjunction is Symmetric
introduceImplication reverseOr ∨ 1 2
introduceImplication reverseOr ∨ 2 1
introduceEquivalence 1 2
qed

theorem andIsAssociative Conjunction is Associative
assume ∧ 1 ∧ 2 3
  eliminateAndRight f.a
  eliminateAndLeft f.a
  eliminateAndLeft f.1
  eliminateAndRight f.1
  introduceAnd f.2 f.3
  introduceAnd f.5 f.4
introduceImplication f.6
assume ∧ ∧ 1 2 3
  eliminateAndLeft f.a
  eliminateAndLeft f.1
  eliminateAndRight f.1
  eliminateAndRight f.a
  introduceAnd f.3 f.4
  introduceAnd f.2 f.5
introduceImplication f.6
introduceEquivalence 1 2
qed

theorem orIsAssociative Disjunction is Associative
introduceImplication introduceOrLeft 1 2
introduceImplication introduceOrRight 2 1
introduceImplication introduceOrLeft ∨ 1 2 3
implicationIsTransitive 1 3
implicationIsTransitive 2 3
introduceImplication introduceOrRight 3 ∨ 1 2
combineCases 5 6
combineCases 4 7
introduceImplication introduceOrLeft 2 3
introduceImplication introduceOrRight 3 2
introduceImplication introduceOrRight ∨ 2 3 1
introduceImplication introduceOrLeft 1 ∨ 2 3
implicationIsTransitive 9 11
implicationIsTransitive 10 11
combineCases 12 13
combineCases 15 14
introduceEquivalence 8 16
qed

theorem andIsIdempotent Conjunction is Idempotent
assume 1
  introduceAnd f.a f.a
introduceImplication f.1
introduceImplication eliminateAndRight ∧ 1 1
introduceEquivalence 1 2
qed

theorem orIsIdempotent Disjunction is Idempotent
introduceImplication introduceOrRight 1 1
implicationIsReflexive 1
combineCases 2 2
introduceEquivalence 1 3
qed

theorem doubleNegationIsNoNegation Double Negation is No Negation At All
introduceImplication introduceDoubleNegation 1
assume ¬ ¬ 1
  eliminateNegation f.a
introduceImplication f.1
introduceEquivalence 1 2
qed

chapter Useful Inferences
Some inferences that can be used to reduce boilerplate in proofs.

theorem combineAntecedents Combine Antecedents
premise → 1 → 2 3
assume ∧ 1 2
  eliminateAndLeft f.a
  eliminateAndRight f.a
  eliminateImplication p1 f.1
  eliminateImplication f.3 f.2
introduceImplication f.4
qed

theorem eliminateNegatedConjunctRight Eliminate Negated Conjunct (Right)
premise 1
premise ¬ ∧ 1 2
assume 2
  introduceAnd p1 f.a
introduceNegation f.1 p2
qed

theorem eliminateNegatedConjunctLeft Eliminate Negated Conjunct (Left)
premise 2
premise ¬ ∧ 1 2
assume 1
  introduceAnd f.a p1
introduceNegation f.1 p2
qed

theorem eliminateLeftDisjunct Eliminate Left Disjunct
premise ∨ 1 2
premise ¬ 1
unapply-∨ p1
eliminateImplication 1 p2
qed

theorem eliminateRightDisjunct Eliminate Right Disjunct
premise ∨ 1 2
premise ¬ 2
reverseOr p1
eliminateLeftDisjunct 1 p2
qed

theorem deMorganPONNtoNAPP De Morgan's Law (PONN to NAPP)
premise ∨ ¬ 1 ¬ 2
unapply-∨ p1
assume 1
  introduceDoubleNegation f.a
  eliminateImplication 1 f.1
introduceImplication f.2
assume ∧ 1 2
  unapply-∧ f.a
introduceNegation 2 f.1
qed

theorem introduceAndInsideNegationLeft Introduce And Inside Negation (Left)
premise ¬ 1
introduceOrLeft p1 ¬ 2
deMorganPONNtoNAPP 1
qed

theorem introduceAndInsideNegationRight Introduce And Inside Negation (Right)
premise ¬ 2
introduceOrRight p1 ¬ 1
deMorganPONNtoNAPP 1
qed

theorem collapseOr Collapse Or
premise ∨ 1 2
premise → 1 2
implicationIsReflexive 2
eliminateOr p1 p2 1
qed

theorem disjoinedConjunctEquivalenceLeft1 Disjoined Conjunct Equivalence (Left 1)
premise 1
premise ¬ 3
introduceImplication eliminateAndRight ∧ 1 2
assume ∧ 3 4
  eliminateAndLeft f.a
  contradictionImpliesAnything f.1 p2 2
introduceImplication f.2
combineCases 1 2
assume 2
  introduceAnd p1 f.a
  introduceOrLeft f.1 ∧ 3 4
introduceImplication f.2
introduceEquivalence 3 4
qed

theorem disjoinedConjunctEquivalenceLeft2 Disjoined Conjunct Equivalence (Left 2)
premise 1
premise 3
introduceDoubleNegation p2
disjoinedConjunctEquivalenceLeft1 p1 1 2 4
qed

theorem disjoinedConjunctEquivalenceRight1 Disjoined Conjunct Equivalence (Right 1)
premise ¬ 1
premise 3
disjoinedConjunctEquivalenceLeft1 p2 p1 4 2
orIsSymmetric ∧ 3 4 ∧ 1 2
equivalenceIsTransitiveLeft 2 1
qed
