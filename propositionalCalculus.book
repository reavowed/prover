book Propositional Calculus

chapter Implication and Negation
We start by introducing our two fundamental connectives, → and ¬, and proving some basic facts about them.

comment Our first connective is '→', or implication. It is a binary connective, which means it has two substatements.
connective → 2
comment This should be read "α implies β", or "if α then β".

comment Our first rule is the first half of the definition of '→'.
rule introduceImplication 1 ⊢ 2 ⇒ → 1 2
comment In other words, if by assuming α we can deduce β, then we can deduce α → β directly. This rule is called "Implication Introduction".

comment This rule is all we need to prove our first theorem.
theorem implicationIsReflexive Implication is Reflexive
assume 1
introduceImplication f.h
qed
comment We start by assuming α. But then we certainly already know α itself, so we can apply the rule of implication introduction to deduce α → α as a tautology - a statement that is always true, regardless of α.

comment Our next rule of inference completes the definition of '→'.
rule eliminateImplication → 1 2 & 1 ⇒ 2
comment This rule is called "Implication Elimination" within the system of natural deduction that we are using, but is more commonly known as "Modus Ponens". Our next theorem demonstrates its use.

theorem implicationIsTransitive Implication is Transitive
hypothesis → 1 2
hypothesis → 2 3
assume 1
  eliminateImplication h1 f.h
  eliminateImplication h2 f.1
introduceImplication f.2
qed

connective ¬ 1
rule introduceNegation 1 ⊢ 2 & ¬ 2 ⇒ ¬ 1
rule eliminateNegation ¬ ¬ 1 ⇒ 1

theorem introduceDoubleNegation Double Negation Introduction
hypothesis 1
assume ¬ 1
introduceNegation h1 f.h
qed

theorem anythingImpliesTrue Anything Implies a True Statement
hypothesis 1
assume 2
introduceImplication h1
qed

theorem falseImpliesAnything1 A False Statement Implies Anything (1)
hypothesis ¬ 1
assume 1
  assume ¬ 2
  introduceNegation f.h h1
  eliminateNegation f.1
introduceImplication f.2
qed

theorem falseImpliesAnything2 A False Statement Implies Anything (2)
hypothesis 1
introduceDoubleNegation h1
falseImpliesAnything1 1 2
qed

theorem modusTollens Modus Tollens
hypothesis → 1 2
hypothesis ¬ 2
assume 1
  eliminateImplication h1 f.h
introduceNegation f.1 h2
qed

theorem contraposition Contraposition
hypothesis → 1 2
assume ¬ 2
  modusTollens h1 f.h
introduceImplication f.1
qed

theorem contradiction Proof by Contradiction
hypothesis → 1 2
hypothesis → 1 ¬ 2
assume 1
  eliminateImplication h1 f.h
  eliminateImplication h2 f.h
introduceNegation f.1 f.2
qed

theorem cases Proof by Cases
hypothesis → 1 2
hypothesis → ¬ 1 2
contraposition h1
contraposition h2
contradiction 1 2
eliminateNegation 3
qed

chapter Conjunction and Disjunction
We introduce two more connectives, ∧ (conjunction, or 'and') and ∨ (disjunction, or 'or'). These will not be defined with introduction and elimination rules, but in terms of the two fundamental connectives → and ¬. We can then prove introduction and elimination rules for them as theorems.

connective ∧ 2 ¬ → 1 ¬ 2

theorem introduceAnd Introduce Conjunction
hypothesis 1
hypothesis 2
assume → 1 ¬ 2
  eliminateImplication f.h h1
introduceNegation h2 f.1
definition-∧ 1
qed

theorem eliminateAndLeft Eliminate Conjunction (Left)
hypothesis ∧ 1 2
assume ¬ 1
  falseImpliesAnything1 f.h ¬ 2
  definition-∧ h1
introduceNegation f.1 f.2
eliminateNegation 1
qed

theorem eliminateAndRight Eliminate Conjunction (Right)
hypothesis ∧ 1 2
assume ¬ 2
  anythingImpliesTrue f.h 1
  definition-∧ h1
introduceNegation f.1 f.2
eliminateNegation 1
qed

theorem combineAntecedents Combine Antecedents
hypothesis → 1 → 2 3
assume ∧ 1 2
  eliminateAndLeft f.h
  eliminateImplication h1 f.1
  eliminateAndRight f.h
  eliminateImplication f.2 f.3
introduceImplication f.4
qed

theorem reverseAnd Reverse Conjunction
hypothesis ∧ 1 2
eliminateAndLeft h1
eliminateAndRight h1
introduceAnd 2 1
qed

connective ∨ 2 → ¬ 1 2

theorem introduceOrLeft Introduce Disjunction (Left)
hypothesis 1
falseImpliesAnything2 h1 2
definition-∨ 1
qed

theorem introduceOrRight Introduce Disjunction (Right)
hypothesis 2
anythingImpliesTrue h1 ¬ 1
definition-∨ 1
qed

theorem eliminateOr Eliminate Disjunction
hypothesis → 1 3
hypothesis → 2 3
hypothesis ∨ 1 2
definition-∨ h3
implicationIsTransitive 1 h2
cases h1 2
qed

theorem combineCases Combine Cases
hypothesis → 1 3
hypothesis → 2 3
assume ∨ 1 2
  definition-∨ f.h
  implicationIsTransitive f.1 h2
  cases h1 f.2
introduceImplication f.3
qed

theorem reverseOr Reverse Disjunction
hypothesis ∨ 1 2
introduceImplication introduceOrRight 1 2
introduceImplication introduceOrLeft 2 1
combineCases 1 2
eliminateImplication 3 h1
qed

theorem excludedMiddle Law of the Excluded Middle
implicationIsReflexive ¬ 1
definition-∨ 1
qed

theorem nonContradiction Law of Non-Contradiction
assume ∧ 1 ¬ 1
definition-∧ f.h
introduceImplication introduceDoubleNegation 1
introduceNegation f.2 f.1
qed

chapter Equivalence
We introduce our final connective, ↔ (equivalence).

connective ↔ 2 ∧ → 1 2 → 2 1

theorem eliminateEquivalenceForward Implication from Equivalence
hypothesis ↔ 1 2
definition-↔ h1
eliminateAndLeft 1
qed

theorem eliminateEquivalenceConverse Converse from Equivalence
hypothesis ↔ 1 2
definition-↔ h1
eliminateAndRight 1
qed

theorem introduceEquivalence Equivalence from Implication and Converse
hypothesis → 1 2
hypothesis → 2 1
introduceAnd h1 h2
definition-↔ 1
qed

theorem reverseEquivalence Reverse Equivalence
hypothesis ↔ 1 2
definition-↔ h1
reverseAnd 1
definition-↔ 2
qed

comment The next three theorems establish the meta-theorem that if α ↔ β, then α can be substituted for β in any other statement. Once we have shown this is true for our two fundamental connectives, establishing it for any more complicated statement is just a rote application of these three theorems.

theorem substituteEquivalenceIntoImplicationAntecedent Substitute Equivalence into Implication Antecedent
hypothesis ↔ 1 2
assume → 1 3
  eliminateEquivalenceConverse h1
  implicationIsTransitive f.1 f.h
introduceImplication f.2
assume → 2 3
  eliminateEquivalenceForward h1
  implicationIsTransitive f.1 f.h
introduceImplication f.2
introduceEquivalence 1 2
qed

theorem substituteEquivalenceIntoImplicationConsequent Substitute Equivalence into Implication Consequent
hypothesis ↔ 1 2
assume → 3 1
  eliminateEquivalenceForward h1
  implicationIsTransitive f.h f.1
introduceImplication f.2
assume → 3 2
  eliminateEquivalenceConverse h1
  implicationIsTransitive f.h f.1
introduceImplication f.2
introduceEquivalence 1 2
qed

theorem substituteEquivalenceIntoNegation Substitute Equivalence into Negation
hypothesis ↔ 1 2
eliminateEquivalenceForward h1
eliminateEquivalenceConverse h1
contraposition 2
contraposition 1
introduceEquivalence 3 4
qed

comment We now show that our equivalence connective has the properties we will later establish as defining an equivalence relation, justifying the use of the same word to describe each.

theorem equivalenceIsReflexive Equivalence is Reflexive
implicationIsReflexive 1
introduceAnd 1 1
definition-↔ 2
qed

theorem equivalenceIsTransitive Equivalence is Transitive
hypothesis ↔ 1 2
hypothesis ↔ 2 3
eliminateEquivalenceForward h1
eliminateEquivalenceForward h2
implicationIsTransitive 1 2
eliminateEquivalenceConverse h2
eliminateEquivalenceConverse h1
implicationIsTransitive 4 5
introduceEquivalence 3 6
qed

theorem equivalenceIsSymmetric Equivalence is Symmetric
introduceImplication reverseEquivalence 1 2
introduceImplication reverseEquivalence 2 1
introduceEquivalence 1 2
qed

comment Some helper theorems for proofs involving equivalences

theorem modusPonensEquivalenceLeft Modus Ponens with Equivalence (Left)
hypothesis ↔ 1 2
hypothesis 1
eliminateEquivalenceForward h1
eliminateImplication 1 h2
qed

theorem modusPonensEquivalenceRight Modus Ponens with Equivalence (Right)
hypothesis ↔ 1 2
hypothesis 2
eliminateEquivalenceConverse h1
eliminateImplication 1 h2
qed

theorem trueStatementsAreEquivalent True Statements Are Equivalent
hypothesis 1
hypothesis 2
anythingImpliesTrue h2 1
anythingImpliesTrue h1 2
introduceEquivalence 1 2
qed

theorem falseStatementsAreEquivalent False Statements Are Equivalent
hypothesis ¬ 1
hypothesis ¬ 2
falseImpliesAnything1 h1 2
falseImpliesAnything1 h2 1
introduceEquivalence 1 2
qed

chapter Propositional Logic Identities
Having established the basic properties of all our connectives, we can now prove a list of identities relating them.

theorem andDefinitionEquivalence Conjunction is Equivalent to Its Definition
introduceImplication definition-∧ ∧ 1 2
introduceImplication definition-∧ ¬ → 1 ¬ 2
introduceEquivalence 1 2
qed

theorem orDefinitionEquivalence Disjunction is Equivalent to Its Definition
introduceImplication definition-∨ ∨ 1 2
introduceImplication definition-∨ → ¬ 1 2
introduceEquivalence 1 2
qed

theorem equivalenceDefinitionEquivalence Equivalence is Equivalent to Its Definition
introduceImplication definition-↔ ↔ 1 2
introduceImplication definition-↔ ∧ → 1 2 → 2 1
introduceEquivalence 1 2
qed

theorem andIsSymmetric Conjunction is Symmetric
introduceImplication reverseAnd 1 2
introduceImplication reverseAnd 2 1
introduceEquivalence 1 2
qed

theorem orIsSymmetric Disjunction is Symmetric
introduceImplication reverseOr 1 2
introduceImplication reverseOr 2 1
introduceEquivalence 1 2
qed

theorem andIsAssociative Conjunction is Associative
assume ∧ 1 ∧ 2 3
  eliminateAndRight f.h
  eliminateAndLeft f.h
  eliminateAndLeft f.1
  eliminateAndRight f.1
  introduceAnd f.2 f.3
  introduceAnd f.5 f.4
introduceImplication f.6
assume ∧ ∧ 1 2 3
  eliminateAndLeft f.h
  eliminateAndLeft f.1
  eliminateAndRight f.1
  eliminateAndRight f.h
  introduceAnd f.3 f.4
  introduceAnd f.2 f.5
introduceImplication f.6
introduceEquivalence 1 2
qed

theorem orIsAssociative Disjunction is Associative
introduceImplication introduceOrLeft 1 2
introduceImplication introduceOrRight 2 1
introduceImplication introduceOrLeft ∨ 1 2 3
implicationIsTransitive 1 3
implicationIsTransitive 2 3
introduceImplication introduceOrRight 3 ∨ 1 2
combineCases 5 6
combineCases 4 7
introduceImplication introduceOrLeft 2 3
introduceImplication introduceOrRight 3 2
introduceImplication introduceOrRight ∨ 2 3 1
introduceImplication introduceOrLeft 1 ∨ 2 3
implicationIsTransitive 9 11
implicationIsTransitive 10 11
combineCases 12 13
combineCases 15 14
introduceEquivalence 8 16
qed

theorem andIsIdempotent Conjunction is Idempotent
assume 1
  introduceAnd f.h f.h
introduceImplication f.1
introduceImplication eliminateAndRight 1 1
introduceEquivalence 1 2
qed

theorem orIsIdempotent Disjunction is Idempotent
introduceImplication introduceOrRight 1 1
implicationIsReflexive 1
combineCases 2 2
introduceEquivalence 1 3
qed

theorem doubleNegationIsNoNegation Double Negation is No Negation At All
introduceImplication introduceDoubleNegation 1
assume ¬ ¬ 1
  eliminateNegation f.h
introduceImplication f.1
introduceEquivalence 1 2
qed

