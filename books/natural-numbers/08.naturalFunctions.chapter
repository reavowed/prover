chapter Natural Functions
Functions on the natural numbers.

theorem A Successor Function Exists
let S = S comprehension x × ℕ ℕ ∃ n ∧ ∈ n ℕ = x orderedPair n successor n {
  prove ⊆ S × ℕ ℕ
  assume ∈ a ℕ {
    assume ∈ orderedPair a b S {
      prove ∃ n ∧ ∈ n ℕ = orderedPair a b orderedPair n successor n
      let x ∧ ∈ x ℕ = orderedPair a b orderedPair x successor x {
        prove = a x
        prove = b successor x
        prove = b successor a
      }
    }
    assume = b successor a {
      prove ∈ successor a ℕ
      prove ∈ b ℕ
      prove ∈ orderedPair a b × ℕ ℕ
      prove = orderedPair a successor a orderedPair a successor a
      prove = orderedPair a b orderedPair a successor a
      prove ∧ ∈ a ℕ = orderedPair a b orderedPair a successor a
      prove ∃ n ∧ ∈ n ℕ = orderedPair a b orderedPair n successor n
      prove ∈ orderedPair a b S
    }
    prove ∃! b ∈ orderedPair a b S
  }
  prove ∀ a → ∈ a ℕ ∃! b ∈ orderedPair a b S
  prove function S ℕ ℕ
  assume ∈ m ℕ {
    prove ∈ orderedPair m apply S m S
    prove ∃ n ∧ ∈ n ℕ = orderedPair m apply S m orderedPair n successor n
    let x ∧ ∈ x ℕ = orderedPair m apply S m orderedPair x successor x {
      prove = m x
      prove = apply S m successor x
      prove = apply S m successor m
    }
  }
  prove ∀ n → ∈ n ℕ = apply S n successor n
  prove ∧ function S ℕ ℕ ∀ n → ∈ n ℕ = apply S n successor n
  prove ∃ f ∧ function f ℕ ℕ ∀ n → ∈ n ℕ = apply f n successor n
  prove ∃! f ∧ function f ℕ ℕ ∀ n → ∈ n ℕ = apply f n successor n
}
qed

theorem Curried Addition
premise ∈ a ℕ
let f_succ ∧ function f_succ ℕ ℕ ∀ n → ∈ n ℕ = apply f_succ n successor n {
  let g ∧ function g ℕ ℕ ∧ = apply g 0 a ∀ m → ∈ m ℕ = apply g successor m apply f_succ apply g m {
    assume ∈ n ℕ {
      prove ∈ apply g n ℕ
      prove = apply f_succ apply g n successor apply g n
      prove = apply g successor n apply f_succ apply g n
      prove = apply g successor n successor apply g n
    }
    prove ∀ m → ∈ m ℕ = apply g successor m successor apply g m
    prove ∧ function g ℕ ℕ ∧ = apply g 0 a ∀ m → ∈ m ℕ = apply g successor m successor apply g m
    prove ∃ f ∧ function f ℕ ℕ ∧ = apply f 0 a ∀ m → ∈ m ℕ = apply f successor m successor apply f m
    prove ∃! f ∧ function f ℕ ℕ ∧ = apply f 0 a ∀ m → ∈ m ℕ = apply f successor m successor apply f m
  }
}
qed
