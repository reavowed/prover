assume ∧ binaryOperation t0 binaryOperationOn t0 t1 {
  prove ∧ function t0 functionFrom t0 product baseSet t0 baseSet t0 baseSet t0 f495d0479711bafa144326d86109ce6ee78538a2ee268e7779996098952fba71 () (t0) 0a 827ecc2b1b19ca976022860dade4c605eef6eb2908bc2934591a9a8abf32ab5a
  existingStatementExtraction {
    prove ∧ binaryOperation t0 = baseSet t0 t1 f339f65a27880a4720090590b1617dce820b6d04c53ec5a1f3f279169fec2943 () (t0, t1) 0a 062123718abc1909811caf4720d2507f5265f54ca9003f4bda14c8d757d44a29
    prove = baseSet t0 t1 062123718abc1909811caf4720d2507f5265f54ca9003f4bda14c8d757d44a29 (binaryOperation t0, = baseSet t0 t1) () 0.1.0
  }
  elided 0bc84cc60c63f0bedf5c3154e0f6f9cea15795bc911992d3489e79c2f021d6ed {
    prove ∧ function t0 functionFrom t0 product t1 baseSet t0 baseSet t0 0bc84cc60c63f0bedf5c3154e0f6f9cea15795bc911992d3489e79c2f021d6ed (∧ function t0 functionFrom t0 product $0 baseSet t0 baseSet t0) (baseSet t0, t1) 0.1 0.0
    prove ∧ function t0 functionFrom t0 product t1 t1 baseSet t0 0bc84cc60c63f0bedf5c3154e0f6f9cea15795bc911992d3489e79c2f021d6ed (∧ function t0 functionFrom t0 product t1 $0 baseSet t0) (baseSet t0, t1) 0.1 0.2.0
    prove ∧ function t0 functionFrom t0 product t1 t1 t1 0bc84cc60c63f0bedf5c3154e0f6f9cea15795bc911992d3489e79c2f021d6ed (∧ function t0 functionFrom t0 product t1 t1 $0) (baseSet t0, t1) 0.1 0.2.1
  }
}
assume ∧ function t0 functionFrom t0 product t1 t1 t1 {
  existingStatementExtraction {
    prove ∧ function t0 ∧ = domain t0 product t1 t1 ⊆ codomain t0 t1 4d4507246c71a4bc0b40086accc8b84c9afca296ba01f595bd5ca9030d2a698b () (t0, product t1 t1, t1) 1a 062123718abc1909811caf4720d2507f5265f54ca9003f4bda14c8d757d44a29
    prove ∧ = domain t0 product t1 t1 ⊆ codomain t0 t1 062123718abc1909811caf4720d2507f5265f54ca9003f4bda14c8d757d44a29 (function t0, ∧ = domain t0 product t1 t1 ⊆ codomain t0 t1) () 1.0.0
    prove = domain t0 product t1 t1 827ecc2b1b19ca976022860dade4c605eef6eb2908bc2934591a9a8abf32ab5a (= domain t0 product t1 t1, ⊆ codomain t0 t1) () 1.0.1
  }
  assume = t1 ∅ {
    elided 9bf59980d52ad2cb597c13a662912d84b3a8ac8e31c3652c0adaa614b43d3dbc {
      prove ∨ = t1 ∅ = t1 ∅ 6ccfde38da3fbc5937d0be48df56b30e7fce440242958bd0ca09d3eb86c6fda3 (= t1 ∅, = t1 ∅) () 1.1a
      elided 9bf59980d52ad2cb597c13a662912d84b3a8ac8e31c3652c0adaa614b43d3dbc {
        prove ↔ = product t1 t1 ∅ ∨ = t1 ∅ = t1 ∅ 9bf59980d52ad2cb597c13a662912d84b3a8ac8e31c3652c0adaa614b43d3dbc () (t1, t1)
        prove → ∨ = t1 ∅ = t1 ∅ = product t1 t1 ∅ 282eb8b17a1260b27adcabbcf0e8b894697750b7d7f4fb3aacf467cf90ad46d6 (= product t1 t1 ∅, ∨ = t1 ∅ = t1 ∅) () 1.1.0.1.0
        prove = product t1 t1 ∅ 00f52187d02fb3be4132cd306e1d837f6d5c90acd4e3ff73fc02416356b758b4 (∨ = t1 ∅ = t1 ∅, = product t1 t1 ∅) () 1.1.0.1.1 1.1.0.0
      }
    }
    elided 88c40023a6a3e42e68f2b9ce1d9db23c852b3d38ef4c5a9564940d05501be870 {
      prove = domain ∅ ∅ 88c40023a6a3e42e68f2b9ce1d9db23c852b3d38ef4c5a9564940d05501be870 () ()
      premiseDerivation {
        prove = ∅ product t1 t1 da679729d278df4b182648b422dd5be34e04602616257aa55b676ca4f04bce58 () (product t1 t1, ∅) 1.1.0
        prove = domain product t1 t1 ∅ 0bc84cc60c63f0bedf5c3154e0f6f9cea15795bc911992d3489e79c2f021d6ed (= domain $0 ∅) (∅, product t1 t1) 1.1.1.1.0 1.1.1.0
      }
    }
    prove = ∅ t1 da679729d278df4b182648b422dd5be34e04602616257aa55b676ca4f04bce58 () (t1, ∅) 1.1a
    prove = domain product t1 t1 t1 4d294cd8ce2d316264853ed793d2a0aea267db95a20130ad5f0f7c0540ae5e83 () (domain product t1 t1, ∅, t1) 1.1.1 1.1.2
  }
  assume ¬ = t1 ∅ {
    prove = domain product t1 t1 t1 8ed240d70b1ed458e81c5f3c5d639b15c0a084b77adee3525a7947593bc4b0b0 () (t1, t1) 1.2a
  }
  prove = domain product t1 t1 t1 12afb9df21eda1ecba39f95a0b7af6e3087951e80382722b0e143de0e3443389 (= t1 ∅, = domain product t1 t1 t1) () 1.1 1.2
  premiseDerivation {
    prove = product t1 t1 domain t0 da679729d278df4b182648b422dd5be34e04602616257aa55b676ca4f04bce58 () (domain t0, product t1 t1) 1.0
    prove = domain domain t0 t1 0bc84cc60c63f0bedf5c3154e0f6f9cea15795bc911992d3489e79c2f021d6ed (= domain $0 t1) (product t1 t1, domain t0) 1.4.0 1.3
  }
  elided 1ada699ab887b0c55160a66d5054a04c38daa2b5411961d7e720ab7b5aaf7f3c {
    elided 1ada699ab887b0c55160a66d5054a04c38daa2b5411961d7e720ab7b5aaf7f3c {
      prove = baseSet t0 domain domain t0 1ada699ab887b0c55160a66d5054a04c38daa2b5411961d7e720ab7b5aaf7f3c () (t0)
      prove = domain domain t0 baseSet t0 da679729d278df4b182648b422dd5be34e04602616257aa55b676ca4f04bce58 () (baseSet t0, domain domain t0) 1.5.0.0
    }
    prove = baseSet t0 t1 0bc84cc60c63f0bedf5c3154e0f6f9cea15795bc911992d3489e79c2f021d6ed (= $0 t1) (domain domain t0, baseSet t0) 1.5.0 1.4
  }
  elided 0bc84cc60c63f0bedf5c3154e0f6f9cea15795bc911992d3489e79c2f021d6ed {
    premiseDerivation {
      prove = t1 baseSet t0 da679729d278df4b182648b422dd5be34e04602616257aa55b676ca4f04bce58 () (baseSet t0, t1) 1.5
      prove functionFrom t0 product baseSet t0 t1 t1 0bc84cc60c63f0bedf5c3154e0f6f9cea15795bc911992d3489e79c2f021d6ed (functionFrom t0 product $0 t1 t1) (t1, baseSet t0) 1.6.0.0 1a 062123718abc1909811caf4720d2507f5265f54ca9003f4bda14c8d757d44a29
    }
    premiseDerivation {
      prove = t1 baseSet t0 da679729d278df4b182648b422dd5be34e04602616257aa55b676ca4f04bce58 () (baseSet t0, t1) 1.5
      prove functionFrom t0 product baseSet t0 baseSet t0 t1 0bc84cc60c63f0bedf5c3154e0f6f9cea15795bc911992d3489e79c2f021d6ed (functionFrom t0 product baseSet t0 $0 t1) (t1, baseSet t0) 1.6.1.0 1.6.0
    }
    premiseDerivation {
      prove = t1 baseSet t0 da679729d278df4b182648b422dd5be34e04602616257aa55b676ca4f04bce58 () (baseSet t0, t1) 1.5
      prove functionFrom t0 product baseSet t0 baseSet t0 baseSet t0 0bc84cc60c63f0bedf5c3154e0f6f9cea15795bc911992d3489e79c2f021d6ed (functionFrom t0 product baseSet t0 baseSet t0 $0) (t1, baseSet t0) 1.6.2.0 1.6.1
    }
  }
  premiseDerivation {
    prove ∧ function t0 functionFrom t0 product baseSet t0 baseSet t0 baseSet t0 301900ba992fe47a3f300cf9f14f0fd6a948ca32c488285b6f4cf2d02efc3a61 (function t0, functionFrom t0 product baseSet t0 baseSet t0 baseSet t0) () 1a 827ecc2b1b19ca976022860dade4c605eef6eb2908bc2934591a9a8abf32ab5a 1.6
    prove binaryOperation t0 8334de482ad12b3bc03fa22cfdef464a342ffcbba3408754bf741a3d3abe27b3 () (t0) 1.7.0
  }
  premiseDerivation {
    prove ∧ binaryOperation t0 = baseSet t0 t1 301900ba992fe47a3f300cf9f14f0fd6a948ca32c488285b6f4cf2d02efc3a61 (binaryOperation t0, = baseSet t0 t1) () 1.7 1.5
    prove binaryOperationOn t0 t1 b625f0238d5c0e6fd6bb5b39188e4f9defacd66249c04de48e5c729876a9ad23 () (t0, t1) 1.8.0
  }
  prove ∧ binaryOperation t0 binaryOperationOn t0 t1 301900ba992fe47a3f300cf9f14f0fd6a948ca32c488285b6f4cf2d02efc3a61 (binaryOperation t0, binaryOperationOn t0 t1) () 1.7 1.8
}
prove ↔ ∧ binaryOperation t0 binaryOperationOn t0 t1 ∧ function t0 functionFrom t0 product t1 t1 t1 df9994032af3276a9a030eb7b809e059dd53a14d6de2e12273242729e90a2a91 (∧ binaryOperation t0 binaryOperationOn t0 t1, ∧ function t0 functionFrom t0 product t1 t1 t1) () 0 1
