chapter Successor Function
Show that the successor operation defines a function ℕ → ℕ.

theorem A Successor Function Exists
let S = S comprehension x × ℕ ℕ ∃ n ∧ ∈ n ℕ = x orderedPair n successor n {
  prove ⊆ S × ℕ ℕ
  assume ∈ a ℕ {
    assume ∧ ∈ b ℕ ∈ orderedPair a b S {
      prove ∃ n ∧ ∈ n ℕ = orderedPair a b orderedPair n successor n
      let n ∧ ∈ n ℕ = orderedPair a b orderedPair n successor n {
        prove = a n
        prove = b successor n
        prove = b successor a
      }
    }
    assume = b successor a {
      prove ∈ successor a ℕ
      prove ∈ b ℕ
      prove ∈ orderedPair a b × ℕ ℕ
      prove = orderedPair a successor a orderedPair a successor a
      prove = orderedPair a b orderedPair a successor a
      prove ∧ ∈ a ℕ = orderedPair a b orderedPair a successor a
      prove ∃ n ∧ ∈ n ℕ = orderedPair a b orderedPair n successor n
      prove ∈ orderedPair a b S
      prove ∧ ∈ b ℕ ∈ orderedPair a b S
    }
    prove ∀ b ↔ ∧ ∈ b ℕ ∈ orderedPair a b S = b successor a
    prove ∃! b ∧ ∈ b ℕ ∈ orderedPair a b S
  }
  prove ∀ a → ∈ a ℕ ∃! b ∧ ∈ b ℕ ∈ orderedPair a b S
  prove function S ℕ ℕ
  assume ∈ a ℕ {
    prove ∧ ∈ apply S a ℕ ∈ orderedPair a apply S a S
    prove ∃ n ∧ ∈ n ℕ = orderedPair a apply S a orderedPair n successor n
    let n ∧ ∈ n ℕ = orderedPair a apply S a orderedPair n successor n {
      prove = a n
      prove = apply S a successor n
      prove = apply S a successor a
    }
  }
  prove ∀ n → ∈ n ℕ = apply S n successor n
  prove ∧ function S ℕ ℕ ∀ n → ∈ n ℕ = apply S n successor n
  prove ∃ f ∧ function f ℕ ℕ ∀ n → ∈ n ℕ = apply f n successor n
}
qed

theorem 𝒫(ℕ × X) Contains All Functions from a Natural Number to X
premise ∈ n ℕ
premise function f n X
prove ⊆ f × n X
prove ⊆ n ℕ
prove ⊆ × n X × ℕ X
prove ⊆ f × ℕ X
prove ∈ f powerSet × ℕ X
qed

theorem Extend Function from a Natural Number to Its Successor
premise ∈ n ℕ
premise function f n X
premise ∈ a X
premise = g ∪ f singleton orderedPair n a
prove ¬ ∈ n n
prove function g ∪ n singleton n X
prove = successor n ∪ n singleton n
prove function g successor n X
qed

theorem Recursion Theorem - Base Case
premise function f X X
premise ∈ x X
premise = S comprehension g powerSet × ℕ X ∃ n ∧ ∈ n ℕ ∧ function g n X ∀ a → ∈ a n ∨ ∧ = a 0 = apply g a x ∃ b ∧ = a successor b = apply g a apply f apply g b
assume ∧ ∈ y X ∈ orderedPair 0 y union S {
  prove ∃ g ∧ ∈ orderedPair 0 y g ∈ g S
  let g ∧ ∈ orderedPair 0 y g ∈ g S {
    prove ∃ n ∧ ∈ n ℕ ∧ function g n X ∀ a → ∈ a n ∨ ∧ = a 0 = apply g a x ∃ b ∧ = a successor b = apply g a apply f apply g b
    let n ∧ ∈ n ℕ ∧ function g n X ∀ a → ∈ a n ∨ ∧ = a 0 = apply g a x ∃ b ∧ = a successor b = apply g a apply f apply g b {
      prove ∈ 0 n
      prove ∨ ∧ = 0 0 = apply g 0 x ∃ b ∧ = 0 successor b = apply g 0 apply f apply g b
      prove ¬ = 0 successor b
      prove ¬ ∧ = 0 successor b = apply g 0 apply f apply g b
      prove ∀ b ¬ ∧ = 0 successor b = apply g 0 apply f apply g b
      prove ¬ ∃ b ∧ = 0 successor b = apply g 0 apply f apply g b
      prove ∧ = 0 0 = apply g 0 x
      prove = apply g 0 x
      prove = y apply g 0
      prove = y x
    }
  }
}
assume = y x {
  prove ∈ y X
  prove function singleton orderedPair 0 x singleton 0 singleton x
  prove = 1 singleton 0
  prove function singleton orderedPair 0 x 1 singleton x
  prove ⊆ singleton x X
  prove function singleton orderedPair 0 x 1 X
  assume ∈ a 1 {
    prove ∈ a singleton 0
    prove = a 0
    prove ∈ orderedPair 0 x singleton orderedPair 0 x
    prove = x apply singleton orderedPair 0 x 0
    prove = apply singleton orderedPair 0 x 0 x
    prove = apply singleton orderedPair 0 x a x
    prove ∨ ∧ = a 0 = apply singleton orderedPair 0 x a x ∃ b ∧ = a successor b = apply singleton orderedPair 0 x a apply f apply singleton orderedPair 0 x b
  }
  prove ∀ a → ∈ a 1 ∨ ∧ = a 0 = apply singleton orderedPair 0 x a x ∃ b ∧ = a successor b = apply singleton orderedPair 0 x a apply f apply singleton orderedPair 0 x b
  prove ∈ 0 ℕ
  prove ∈ 1 ℕ
  prove ∧ ∈ 1 ℕ ∧ function singleton orderedPair 0 x 1 X ∀ a → ∈ a 1 ∨ ∧ = a 0 = apply singleton orderedPair 0 x a x ∃ b ∧ = a successor b = apply singleton orderedPair 0 x a apply f apply singleton orderedPair 0 x b
  prove ∃ n ∧ ∈ n ℕ ∧ function singleton orderedPair 0 x n X ∀ a → ∈ a n ∨ ∧ = a 0 = apply singleton orderedPair 0 x a x ∃ b ∧ = a successor b = apply singleton orderedPair 0 x a apply f apply singleton orderedPair 0 x b
  prove ∈ singleton orderedPair 0 x powerSet × ℕ X
  prove ∈ singleton orderedPair 0 x S
  prove ∈ singleton orderedPair 0 y S
  prove ∈ orderedPair 0 y singleton orderedPair 0 y
  prove ∈ orderedPair 0 y union S
  prove ∧ ∈ y X ∈ orderedPair 0 y union S
}
prove ∃! y ∧ ∈ y X ∈ orderedPair 0 y union S
qed
