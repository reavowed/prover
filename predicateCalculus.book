book Predicate Calculus
import Propositional Calculus

chapter Universal Quantifier
Introduce the universal quantifier.

quantifier ∀ () ()
rule introduceForall sub 2 1 1 ⇒ ∀ 1 1 | 2 x 2 1
rule eliminateForall ∀ 1 1 ⇒ sub 2 1 1

theorem distributeForallOverImplication Distribute Universal Quantifier over Implication
premise ∀ 1 → 1 2
eliminateForall p1 2
assume ∀ 1 1
  eliminateForall f.a 2
  eliminateImplication 1 f.1
  introduceForall f.2
introduceImplication f.3
qed

theorem modusPonensInsideForall Modus Ponens Inside Forall
premise ∀ 1 → 1 2
premise sub 2 1 1
eliminateForall p1 2 1
eliminateImplication 1 p2
qed

theorem modusTollensInsideForall Modus Tollens Inside Forall
premise ∀ 1 → 1 2
premise ∀ 1 ¬ 2
eliminateForall p1 1' 1
eliminateForall p2 1' 1
modusTollens1 1 2
introduceForall 3 ¬ 1 1' 1
qed

theorem implicationThenEquivalenceInsideForall Implication then Equivalence Inside Forall
premise ∀ 1 → 1 2
premise ∀ 1 ↔ 2 3
eliminateForall p1 2 1
eliminateForall p2 2 1
implicationThenEquivalence 1 2
introduceForall 3 → 1 3 2 1
qed


theorem distributeForallOverConjunction Universal Quantifier Distributes over Conjunction
assume ∀ 1 ∧ 1 2
  eliminateForall f.a 2
  eliminateAndLeft f.1
  introduceForall f.2
  eliminateAndRight f.1
  introduceForall f.4
  introduceAnd f.3 f.5
introduceImplication f.6
assume ∧ ∀ 1 1 ∀ 1 2
  eliminateAndLeft f.a
  eliminateForall f.1 2
  eliminateAndRight f.a
  eliminateForall f.3 2
  introduceAnd f.2 f.4
  introduceForall f.5 ∧ 1 2 2 1
introduceImplication f.6
introduceEquivalence 1 2
qed

theorem introduceEquivalenceInsideForall Introduce Equivalence Inside Forall
premise ∀ 1 → 1 2
premise ∀ 1 → 2 1
eliminateForall p1 2 1
eliminateForall p2 2 1
introduceEquivalence 1 2
introduceForall 3 ↔ 1 2 2 1
qed

theorem implicationIsTransitiveInsideForall Implication is Transitive Inside Forall
premise ∀ 1 → 1 2
premise ∀ 1 → 2 3
eliminateForall p1 2 1
eliminateForall p2 2 1
implicationIsTransitive 1 2
introduceForall 3 → 1 3 2 1
qed

theorem equivalenceIsTransitiveInsideForall Equivalence is Transitive Inside Forall
premise ∀ 1 ↔ 1 2
premise ∀ 1 ↔ 2 3
eliminateForall p1 2 1
eliminateForall p2 2 1
equivalenceIsTransitive 1 2
introduceForall 3 ↔ 1 3 2 1
qed

theorem equivalenceIsTransitiveInsideForallRight Equivalence is Transitive Inside Forall (Right)
premise ∀ 1 ↔ 1 2
premise ∀ 1 ↔ 3 2
eliminateForall p1 2 1
eliminateForall p2 2 1
equivalenceIsTransitiveRight 1 2
introduceForall 3 ↔ 1 3 2 1
qed

theorem equivalenceIsTransitiveInsideForallLeft Equivalence is Transitive Inside Forall (Left)
premise ∀ 1 ↔ 1 2
premise ∀ 1 ↔ 1 3
eliminateForall p1 2 1
eliminateForall p2 2 1
equivalenceIsTransitiveLeft 1 2
introduceForall 3 ↔ 2 3 2 1
qed

theorem modusTollensEquivalenceInsideForallLeft Modus Tollens With Equivalence Inside Forall (Left)
premise ∀ 1 ↔ 1 2
premise ∀ 1 ¬ 1
eliminateForall p1 1' 1
eliminateForall p2 1' 1
modusTollensEquivalenceLeft 1 2
introduceForall 3 ¬ 2 1' 1
qed

theorem modusTollensEquivalenceInsideForallRight Modus Tollens With Equivalence Inside Forall (Right)
premise ∀ 1 ↔ 1 2
premise ∀ 1 ¬ 2
eliminateForall p1 1' 1
eliminateForall p2 1' 1
modusTollensEquivalenceRight 1 2
introduceForall 3 ¬ 1 1' 1
qed

theorem falseStatementsAreEquivalentInsideForall False Statements Are Equivalent Inside Forall
premise ∀ 1 ¬ 1
premise ∀ 1 ¬ 2
eliminateForall p1 1'
eliminateForall p2 1'
falseStatementsAreEquivalent 1 2
introduceForall 3 ↔ 1 2 1' 1
qed

chapter Existential Quantifier
Introduce the existential quantifier, ∃.

quantifier ∃ (¬ ∀ 1 ¬ 1) ()

theorem introduceExists Introduce Existential Quantifier
premise sub 2 1 1
assume ∀ 1 ¬ 1
  eliminateForall f.a 2
introduceNegation p1 f.1
apply-∃ 1
qed

theorem eliminateExists Eliminate Existential Quantifier
premise ∃ 1 1
premise → sub 2 1 1 2
unapply-∃ p1
assume ¬ 2
  modusTollens1 p2 f.a
  introduceForall f.1 ¬ 1 2 1
introduceNegation f.2 1
eliminateNegation 2
qed

theorem notExistsIsForallNot Negated Exists is Forall Negated
premise ¬ ∃ 1 1
assume ¬ ∀ 1 ¬ 1
  apply-∃ f.a
introduceNegation f.1 p1
eliminateNegation 1
qed

chapter Equality
Introduce equality and its associated rules of inference.

predicate = 2
axiom equalityIsReflexive "Equality is Reflexive" = 1 1
rule eliminateEquals = 1 2 & sub 1 3 1 ⇒ sub 2 3 1

theorem reverseEquality Reverse Equality
premise = 1 2
equalityIsReflexive 1
eliminateEquals p1 1 = 3 1 3
qed

theorem equalityIsSymmetric Equality Is Symmetric
assume = 1 2
  reverseEquality f.a
introduceImplication f.1
assume = 2 1
  reverseEquality f.a
introduceImplication f.1
introduceEquivalence 1 2
qed

theorem equalityIsTransitive Equality Is Transitive
premise = 1 2
premise = 2 3
eliminateEquals p2 p1 = 1 4 4
qed

theorem equalityIsTransitiveLeft Equality Is Transitive (Left)
premise = 1 2
premise = 1 3
reverseEquality p1
equalityIsTransitive 1 p2
qed

theorem equalityIsTransitiveRight Equality Is Transitive (Right)
premise = 1 2
premise = 3 2
reverseEquality p2
equalityIsTransitive p1 1
qed

theorem eliminateEqualsReverse Eliminate Equals (Reverse)
premise = 2 1
premise sub 1 3 1
reverseEquality p1
eliminateEquals 1 p2
qed

theorem reverseEqualityInAntecedent Reverse Equality in Antecedent
premise → = 1 2 1
assume = 2 1
  reverseEquality f.a
  eliminateImplication p1 f.1
introduceImplication f.2
qed

theorem thereExistsASetEqualToAnySet There Exists a Set Equal to Any Set
equalityIsReflexive 1
introduceExists 1 = 2 1 1 2
qed

chapter Uniqueness Quantifier
Introduce the uniqueness quantifier, ∃!.

quantifier ∃! (∃ 2 ∀ 1 ↔ 1 = 1 2) (2 1)

theorem uniqueSetExists A Unique Set Exists
premise ∃! 1 1
unapply-∃! p1 2
assume ∀ 1 ↔ 1 = 1 3
  eliminateForall f.a 3
  equalityIsReflexive 3
  modusPonensEquivalenceRight f.1 f.2
  introduceExists f.3
introduceImplication f.4
eliminateExists 1 2 3
qed

theorem thereExistsAUniqueSetEqualToAnySet There Exists a Unique Set Equal to Any Set
equivalenceIsReflexive = 3 2
introduceForall 1 ↔ = 1 2 = 1 2 3 1
introduceExists 2 ∀ 1 ↔ = 1 2 = 1 3 2 3
apply-∃! 3
qed
